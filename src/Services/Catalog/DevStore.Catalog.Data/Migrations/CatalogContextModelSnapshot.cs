// <auto-generated />
using System;
using DevStore.Catalog.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DevStore.Catalog.Data.Migrations
{
    [DbContext(typeof(CatalogContext))]
    partial class CatalogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DevStore.Catalog.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60e5157c-be4a-43fc-ae04-165554577076"),
                            Code = 1,
                            Name = "Category 1"
                        },
                        new
                        {
                            Id = new Guid("344723d0-73e8-4908-bbc1-91e973add6b1"),
                            Code = 2,
                            Name = "Category 2"
                        });
                });

            modelBuilder.Entity("DevStore.Catalog.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassSize")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("PlacesAvailable")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88e0b857-1482-43eb-ab85-78aa3fdfd5b1"),
                            CategoryId = new Guid("60e5157c-be4a-43fc-ae04-165554577076"),
                            ClassSize = 10,
                            CreatedDate = new DateTime(2021, 2, 14, 15, 3, 46, 829, DateTimeKind.Local).AddTicks(6634),
                            Description = "Description 1",
                            Enable = true,
                            Image = "image1.jpg",
                            Name = "Course 1",
                            PlacesAvailable = 10,
                            Price = 10m,
                            Video = "video1.mp4"
                        },
                        new
                        {
                            Id = new Guid("b87d1c62-bd7f-4cfe-b20e-60f7b84bbd8f"),
                            CategoryId = new Guid("344723d0-73e8-4908-bbc1-91e973add6b1"),
                            ClassSize = 20,
                            CreatedDate = new DateTime(2021, 2, 14, 15, 3, 46, 831, DateTimeKind.Local).AddTicks(3428),
                            Description = "Description 2",
                            Enable = true,
                            Image = "image2.jpg",
                            Name = "Course 2",
                            PlacesAvailable = 10,
                            Price = 20m,
                            Video = "video1.mp4"
                        });
                });

            modelBuilder.Entity("DevStore.Catalog.Domain.Course", b =>
                {
                    b.HasOne("DevStore.Catalog.Domain.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DevStore.Catalog.Domain.Period", "Period", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnName("EndDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("StartDate")
                                .HasColumnName("StartDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("CourseId");

                            b1.ToTable("Courses");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");

                            b1.HasData(
                                new
                                {
                                    CourseId = new Guid("88e0b857-1482-43eb-ab85-78aa3fdfd5b1"),
                                    EndDate = new DateTime(2021, 3, 14, 15, 3, 46, 820, DateTimeKind.Local).AddTicks(5822),
                                    StartDate = new DateTime(2021, 2, 14, 15, 3, 46, 816, DateTimeKind.Local).AddTicks(2557)
                                },
                                new
                                {
                                    CourseId = new Guid("b87d1c62-bd7f-4cfe-b20e-60f7b84bbd8f"),
                                    EndDate = new DateTime(2021, 4, 14, 15, 3, 46, 828, DateTimeKind.Local).AddTicks(3980),
                                    StartDate = new DateTime(2021, 2, 14, 15, 3, 46, 828, DateTimeKind.Local).AddTicks(3916)
                                });
                        });

                    b.OwnsOne("DevStore.Catalog.Domain.Specification", "Specification", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("NumberOfClasses")
                                .HasColumnName("NumberOfClasses")
                                .HasColumnType("int");

                            b1.Property<int>("TotalTime")
                                .HasColumnName("Duration")
                                .HasColumnType("int");

                            b1.HasKey("CourseId");

                            b1.ToTable("Courses");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");

                            b1.HasData(
                                new
                                {
                                    CourseId = new Guid("88e0b857-1482-43eb-ab85-78aa3fdfd5b1"),
                                    NumberOfClasses = 10,
                                    TotalTime = 100
                                },
                                new
                                {
                                    CourseId = new Guid("b87d1c62-bd7f-4cfe-b20e-60f7b84bbd8f"),
                                    NumberOfClasses = 20,
                                    TotalTime = 200
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
